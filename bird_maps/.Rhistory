rm(list = ls())
library(raster)
library(rgdal)
library(plyr)
library(tools)
library(sf)
library(sf)
library(rgbif)
?occ_data
head(name_suggest(q='Carnivora'))
head(name_suggest(q='Chiroptera'))
ek<-occ_data(
orderKey = 734,
decimalLatitude = "-13,15",
decimalLongitude = "-82,-49",
limit = 10000#,
#return="all",
country = "COL"
)
ek<-occ_data(
orderKey = 734,
decimalLatitude = "-13,15",
decimalLongitude = "-82,-49",
limit = 10000,#,
#return="all",
country = "COL"
)
datos<-cbind(ek$data,ek$meta)
str(datos)
str(rk)
str(ek)
head(name_suggest(q='Chiroptera'))
library(tmap)
install.packages("sf")
library(tmap)
library(terra)
library(xfun)
library(sf)
setwd("C:/Data/50Reefs/Felipe/iucn/rasters_aves")
ebird<-read.csv("analisis_Orlando/eBird2x2.csv")
myfiles = list.files("aves-shp/raster_aves_buffer_20k/sp_range", pattern="*.tif")
#myfiles = list.files("endemic_Lumbierres", pattern="*.tif")
list_pol<-list()
for (i in 1:length(myfiles)){
print(file_ext(myfiles[[i]]))
if(file_ext(myfiles[[i]]) == "xml"|file_ext(myfiles[[i]]) == "lock"|
file_ext(myfiles[[i]]) == "cpg"|file_ext(myfiles[[i]]) == "dbf"){
list_pol[[i]]<-NULL
}else{
list_pol[[i]]<-myfiles[[i]]
}
}
list_pol<-plyr::compact(list_pol)
list_pol<-unlist(list_pol)
setwd("C:/Data/50Reefs/Felipe/iucn/rasters_aves/aves-shp/raster_aves_buffer_20k/sp_range/")
a<-rast(list_pol[[1]])
ebird$X<-NULL
ebird<-ebird[!duplicated(ebird),]
#plyr::count(ebird$scientific_name)
ebird_shp<-ebird
ebird_shp <- st_as_sf(x = ebird_shp,
coords = c("longitude", "latitude"),
crs = crs(a))
ebird_shp<-cbind(ebird_shp,ebird[c("longitude","latitude")])
validation<-function(vals){
cd<-plyr::count(vals)
va<-length(cd[which(cd$layer == 1),"freq"])/sum(cd$freq,na.rm = T)
return(va)
}
m<-list()
sp_dis<-list()
for(i in 901:1200){
timestamp()
rastsp<-rast(list_pol[[i]])
#spnames<-strsplit(list_pol[[i]],"_AOH.tif")
spnames<-strsplit(list_pol[[i]],".tif")
spnames<-strsplit(spnames[[1]],"_")
spnames<-unlist(spnames)
spnames<-paste0(spnames[[1]]," ",spnames[[2]])
records<-subset(ebird_shp,ebird$scientific_name == spnames)
if(nrow(records) < 1){
m[[i]]<-data.frame(vali = NA,reso = NA, species = spnames)
}
if(nrow(records) < 1)next
vals<-terra::extract(a,records[c("longitude","latitude")])
vali<-validation(vals)
records<-data.frame(records[c("longitude","latitude")])
records$geometry<-NULL
records<-dismo::gridSample(data.frame(records[c("longitude","latitude")]),
raster::raster(rastsp),n = 1)
records <- st_as_sf(x = records,
coords = c("longitude", "latitude"),
crs = crs(rastsp))
#if(vali> 0.7)next
r1<-rastsp
r2<-rastsp
r2[]<-1000
r2<-mask(r2,records)
r1[which(r2[]==1000)]<-1000
which(r1[]>1)
#
#create a name for the temporal file
filename <- paste0(tempfile(), "_.tif")
#now we divide the original raster using the tiles template.
#This will create 2 columns and 2 rows
x <- rast(ncols=1, nrows=1,extent = ext(r1))
system.time(ff <- makeTiles(r1, x, filename))
ff
#you can get your spatial raster from your virtual file:
r1_vrt<- vrt(ff)
system.time(rdist<-gridDistance(r1_vrt,1000))
#plot(rdist)
sp_dis[[i]]<-rdist
gc()
print(i)
}
##------ Fri Dec 01 02:30:17 2023 ------##
##------ Fri Dec 01 02:30:48 2023 ------##
##------ Fri Dec 01 02:31:17 2023 ------##
##------ Fri Dec 01 02:31:55 2023 ------##
##------ Fri Dec 01 02:32:45 2023 ------##
##------ Fri Dec 01 02:33:42 2023 ------##
##------ Fri Dec 01 02:34:18 2023 ------##
##------ Fri Dec 01 02:34:49 2023 ------##
##------ Fri Dec 01 02:35:58 2023 ------##
##------ Fri Dec 01 02:36:40 2023 ------##
##------ Fri Dec 01 02:37:17 2023 ------##
##------ Fri Dec 01 02:40:34 2023 ------##
##------ Fri Dec 01 02:41:16 2023 ------##
##------ Fri Dec 01 02:42:00 2023 ------##
##------ Fri Dec 01 02:42:58 2023 ------##
##------ Fri Dec 01 02:43:37 2023 ------##
##------ Fri Dec 01 02:44:20 2023 ------##
##------ Fri Dec 01 02:44:57 2023 ------##
##------ Fri Dec 01 02:45:36 2023 ------##
##------ Fri Dec 01 02:46:18 2023 ------##
##------ Fri Dec 01 02:47:07 2023 ------##
##------ Fri Dec 01 02:47:46 2023 ------##
##------ Fri Dec 01 02:48:49 2023 ------##
##------ Fri Dec 01 02:49:30 2023 ------##
##------ Fri Dec 01 02:50:06 2023 ------##
##------ Fri Dec 01 02:50:57 2023 ------##
##------ Fri Dec 01 02:51:42 2023 ------##
##------ Fri Dec 01 02:52:16 2023 ------##
##------ Fri Dec 01 02:52:59 2023 ------##
##------ Fri Dec 01 02:53:36 2023 ------##
##------ Fri Dec 01 02:55:54 2023 ------##
##------ Fri Dec 01 02:56:28 2023 ------##
##------ Fri Dec 01 02:57:43 2023 ------##
##------ Fri Dec 01 02:58:28 2023 ------##
##------ Fri Dec 01 02:59:21 2023 ------##
##------ Fri Dec 01 03:00:05 2023 ------##
##------ Fri Dec 01 03:01:00 2023 ------##
##------ Fri Dec 01 03:01:36 2023 ------##
##------ Fri Dec 01 03:01:36 2023 ------##
##------ Fri Dec 01 03:02:26 2023 ------##
##------ Fri Dec 01 03:02:26 2023 ------##
##------ Fri Dec 01 03:02:26 2023 ------##
##------ Fri Dec 01 03:02:58 2023 ------##
##------ Fri Dec 01 03:03:57 2023 ------##
##------ Fri Dec 01 03:05:03 2023 ------##
##------ Fri Dec 01 03:06:04 2023 ------##
##------ Fri Dec 01 03:07:00 2023 ------##
##------ Fri Dec 01 03:07:35 2023 ------##
##------ Fri Dec 01 03:08:22 2023 ------##
##------ Fri Dec 01 03:09:10 2023 ------##
##------ Fri Dec 01 03:09:42 2023 ------##
##------ Fri Dec 01 03:10:45 2023 ------##
##------ Fri Dec 01 03:11:45 2023 ------##
##------ Fri Dec 01 03:12:19 2023 ------##
##------ Fri Dec 01 03:12:47 2023 ------##
##------ Fri Dec 01 03:13:39 2023 ------##
##------ Fri Dec 01 03:14:22 2023 ------##
##------ Fri Dec 01 03:14:56 2023 ------##
##------ Fri Dec 01 03:15:37 2023 ------##
##------ Fri Dec 01 03:16:07 2023 ------##
##------ Fri Dec 01 03:16:44 2023 ------##
##------ Fri Dec 01 03:18:11 2023 ------##
##------ Fri Dec 01 03:18:43 2023 ------##
##------ Fri Dec 01 03:19:17 2023 ------##
##------ Fri Dec 01 03:19:58 2023 ------##
##------ Fri Dec 01 03:20:25 2023 ------##
##------ Fri Dec 01 03:21:00 2023 ------##
##------ Fri Dec 01 03:21:42 2023 ------##
##------ Fri Dec 01 03:21:42 2023 ------##
##------ Fri Dec 01 03:22:22 2023 ------##
##------ Fri Dec 01 03:22:22 2023 ------##
##------ Fri Dec 01 03:22:57 2023 ------##
##------ Fri Dec 01 03:23:47 2023 ------##
##------ Fri Dec 01 03:24:23 2023 ------##
##------ Fri Dec 01 03:24:59 2023 ------##
##------ Fri Dec 01 03:26:09 2023 ------##
##------ Fri Dec 01 03:26:48 2023 ------##
##------ Fri Dec 01 03:27:30 2023 ------##
##------ Fri Dec 01 03:28:09 2023 ------##
##------ Fri Dec 01 03:29:09 2023 ------##
##------ Fri Dec 01 03:29:52 2023 ------##
##------ Fri Dec 01 03:30:27 2023 ------##
##------ Fri Dec 01 03:31:24 2023 ------##
##------ Fri Dec 01 03:33:34 2023 ------##
##------ Fri Dec 01 03:34:13 2023 ------##
##------ Fri Dec 01 03:34:44 2023 ------##
##------ Fri Dec 01 03:35:13 2023 ------##
##------ Fri Dec 01 03:35:51 2023 ------##
##------ Fri Dec 01 03:36:26 2023 ------##
##------ Fri Dec 01 03:37:03 2023 ------##
##------ Fri Dec 01 03:37:56 2023 ------##
##------ Fri Dec 01 03:39:01 2023 ------##
##------ Fri Dec 01 03:40:13 2023 ------##
##------ Fri Dec 01 03:41:03 2023 ------##
##------ Fri Dec 01 03:41:49 2023 ------##
##------ Fri Dec 01 03:42:21 2023 ------##
##------ Fri Dec 01 03:42:59 2023 ------##
##------ Fri Dec 01 03:43:45 2023 ------##
##------ Fri Dec 01 03:44:22 2023 ------##
##------ Fri Dec 01 03:45:02 2023 ------##
##------ Fri Dec 01 03:45:54 2023 ------##
##------ Fri Dec 01 03:46:32 2023 ------##
##------ Fri Dec 01 03:47:13 2023 ------##
##------ Fri Dec 01 03:47:57 2023 ------##
##------ Fri Dec 01 03:49:08 2023 ------##
##------ Fri Dec 01 03:49:53 2023 ------##
##------ Fri Dec 01 03:50:27 2023 ------##
##------ Fri Dec 01 03:51:37 2023 ------##
timestamp()
##------ Fri Dec 01 06:12:50 2023 ------##
rastsp<-rast(list_pol[[i]])
#spnames<-strsplit(list_pol[[i]],"_AOH.tif")
spnames<-strsplit(list_pol[[i]],".tif")
spnames<-strsplit(spnames[[1]],"_")
spnames<-unlist(spnames)
spnames<-paste0(spnames[[1]]," ",spnames[[2]])
records<-subset(ebird_shp,ebird$scientific_name == spnames)
if(nrow(records) < 1){
m[[i]]<-data.frame(vali = NA,reso = NA, species = spnames)
}
if(nrow(records) < 1)next
vals<-terra::extract(a,records[c("longitude","latitude")])
vali<-validation(vals)
records<-data.frame(records[c("longitude","latitude")])
records$geometry<-NULL
records<-dismo::gridSample(data.frame(records[c("longitude","latitude")]),
raster::raster(rastsp),n = 1)
records <- st_as_sf(x = records,
coords = c("longitude", "latitude"),
crs = crs(rastsp))
#if(vali> 0.7)next
r1<-rastsp
r2<-rastsp
r2[]<-1000
r2<-mask(r2,records)
r1[which(r2[]==1000)]<-1000
which(r1[]>1)
#
#create a name for the temporal file
filename <- paste0(tempfile(), "_.tif")
#now we divide the original raster using the tiles template.
#This will create 2 columns and 2 rows
x <- rast(ncols=1, nrows=1,extent = ext(r1))
system.time(ff <- makeTiles(r1, x, filename))
ff
#you can get your spatial raster from your virtual file:
r1_vrt<- vrt(ff)
system.time(rdist<-gridDistance(r1_vrt,1000))
plot(rdist)
#plot(rdist)
sp_dis[[i]]<-rdist
i
for(i in 1009:1200){
timestamp()
rastsp<-rast(list_pol[[i]])
#spnames<-strsplit(list_pol[[i]],"_AOH.tif")
spnames<-strsplit(list_pol[[i]],".tif")
spnames<-strsplit(spnames[[1]],"_")
spnames<-unlist(spnames)
spnames<-paste0(spnames[[1]]," ",spnames[[2]])
records<-subset(ebird_shp,ebird$scientific_name == spnames)
if(nrow(records) < 1){
m[[i]]<-data.frame(vali = NA,reso = NA, species = spnames)
}
if(nrow(records) < 1)next
vals<-terra::extract(a,records[c("longitude","latitude")])
vali<-validation(vals)
records<-data.frame(records[c("longitude","latitude")])
records$geometry<-NULL
records<-dismo::gridSample(data.frame(records[c("longitude","latitude")]),
raster::raster(rastsp),n = 1)
records <- st_as_sf(x = records,
coords = c("longitude", "latitude"),
crs = crs(rastsp))
#if(vali> 0.7)next
r1<-rastsp
r2<-rastsp
r2[]<-1000
r2<-mask(r2,records)
r1[which(r2[]==1000)]<-1000
which(r1[]>1)
#
#create a name for the temporal file
filename <- paste0(tempfile(), "_.tif")
#now we divide the original raster using the tiles template.
#This will create 2 columns and 2 rows
x <- rast(ncols=1, nrows=1,extent = ext(r1))
system.time(ff <- makeTiles(r1, x, filename))
ff
#you can get your spatial raster from your virtual file:
r1_vrt<- vrt(ff)
system.time(rdist<-gridDistance(r1_vrt,1000))
#plot(rdist)
sp_dis[[i]]<-rdist
gc()
print(i)
}
##------ Fri Dec 01 06:14:52 2023 ------##
##------ Fri Dec 01 06:15:18 2023 ------##
##------ Fri Dec 01 06:16:00 2023 ------##
##------ Fri Dec 01 06:16:27 2023 ------##
##------ Fri Dec 01 06:16:59 2023 ------##
##------ Fri Dec 01 06:17:31 2023 ------##
##------ Fri Dec 01 06:18:19 2023 ------##
##------ Fri Dec 01 06:19:04 2023 ------##
##------ Fri Dec 01 06:19:44 2023 ------##
##------ Fri Dec 01 06:20:17 2023 ------##
##------ Fri Dec 01 06:23:40 2023 ------##
##------ Fri Dec 01 06:27:17 2023 ------##
##------ Fri Dec 01 06:30:34 2023 ------##
##------ Fri Dec 01 06:34:16 2023 ------##
##------ Fri Dec 01 06:37:50 2023 ------##
